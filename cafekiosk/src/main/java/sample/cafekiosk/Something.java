package sample.cafekiosk;

public class Something {}


/*
주문 목록에 음료 추가 삭제
주문 목록 전체 지우기
주문 목록 총 금액 계산하기
주문 생성하기

한 종류의 음료를 여러 잔에 한 번에 담는 기능

가게 운영시간(10:00 ~ 22:00) 외에는 주문을 생성할 수 없다.
 */


/*
질문하기: 암묵적이거나 아직 드러나지 않은 요구사항이 있는가?

해피 케이스

예외 케이스 - 암묵적인 경우가 많음

경계값 테스트가 중요 - 범위(이상, 이하, 초과, 미만) 구간, 날짜 등
 */


/*
TDD
프로덕션 코드보다 테스트 코드를 먼저 작성하여 테스트가 구현 과정을 주도하도록 하는 방법론

레드(실패하는 테스트) -> 그린(테스트 통과하는 최소한의 코딩) -> 리팩토링(테스트를 통과 유지하면서 구현 코드 개선)

핵심 가치 - 피드백
내가 작성한코드에 대해 빠르고 정확하게 피드백을 받을 수 있는 장점이 있다.

선기능 구현 후 테스트 작성 시
테스트 자체의 누락 가능성이 있다.
특정 케이스만 검증할 가능성이 있다.
잘못된 구현을 다소 늦게 발견할 가능성이 있다.

선테스트 후 기능구현
복잡도가 낮은 테스트 가능한 코드로 구현할 수 있게한다.
쉽게 발견하기 어려운 엣지 케이스를 놓치지 않게 해줄 수 있다.
구현에 대한 빠른 피드백을 받을 수 있다.
과감한 리팩토링이 가능해진다.
 */

/*
테스트
프로덕션 기능을 설명하는 테스트 코드 문서
다양한 테스트 케이스를 통해 프로덕션 코들르 이해하는 시각과 관점을 보완
어느 한 사람이 과거에 경험했던 고민의 결과물을 팀 차원으로 승격 시켜서 모두의 자산으로 공유할 수 있다.
 */

/*
Display Name 을 섬세하게
명사의 나열보다는 문장으로 만든다
테스트 행위에 대한 결과까지 적는다
도메인 용어를 사용해서 한층 추상화된 내용을 담기
메서드 자체의 관점보다 도메인 정책 관점으로
테스트의 현상을 중점으로 기술하지 말것 -> 예를 들어 특정 시간 이전에 주문을 생성하면 '실패한다' 실패한다가 테스트의 현상이다.
 */

/*
BDD 스타일로 작성
TDD에서 파생된 개발 방법
함수 단위 테스트에 집중하기 보다 시나리오에 기반한 테스트 케이스 자체에 집중하여 테스트한다
개발자가 아닌 사람이 봐도 이해할 수 있을 수준의 추상화 수준을 권장
 */
